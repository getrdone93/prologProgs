-- B-Prolog
     B-Prolog is a high-performance implementation of the standard Prolog
     language with several extended features including matching clauses,
     action rules for event handling, finite-domain constraint solving,
     arrays and hash tables, declarative loops, and tabling.

     B-Prolog is a Prolog system with extensions for programming concurrency,
     constraints, and interactive graphics

     B-Prolog does not only accept standard-form Prolog programs, but also
     accepts matching clauses, in which the determinacy and input/output unifications
     are explicitly denoted. Matching clauses are compiled into more compact and
     faster code than standard-form clauses. The compiler and most of the libraries are
     written in matching clauses

     B-Prolog provides a bi-directional interface with C and Java. This
     interface makes it possible to integrate Prolog with C, C++, and Java

     B-Prolog offers a language, called AR (action rules), which is useful for programming con-
     currency, implementing constraint propagators, and developing interactive user in-
     terfaces

     matching clauses
        pg. 53
        Matching clauses are determinate, and employ one-directional matching rather
        than unification in the execution. The compiler takes advantage of these facts in
        order to generate faster and more compact code for matching clauses. While the
        compiler generates indexing code for Prolog clauses on at most one argument, it
        generates indexing code on as many arguments as possible for matching clauses. A
        program that is written by using matching clauses can be significantly faster than
        its counterpart that is written by using standard clauses, if multi-level indexing is
        effective.



--What is PRISM?
     -Based off of B-Prolog
     -PRISM = Prolog + probability + parameter learning


     PRISM programs are roughly defined as logic programs with a probability
     distribution given to facts.

     Syntactically, PRISM is just Prolog augmented with a probabilistic
     built-in predicate and declarations. There is no restriction on the
     use of function symbols, predicate symbols or recursion, and PRISM
     programs are executed in a top-down left-to-right manner just like Prolog

     PRISM programming goes through three phases: programming, learning and
     execution.

     1.1 Building a probabilistic model with random switches
        The most characteristic feature of PRISM is that it provides random switches to make probabilistic choices. A
        random switch has a name, a space of possible outcomes, and a probability distribution. The first example is a
        simple program that uses just one random switch:
        values(coin,[head,tail]).

        load program with prism(fileName)
            -must have the .psm file extension

        call predicate with sample(direction(D)).
        show distribution with show_sw.
        change distribution with set_sw(switchName, [prob1, prob2, etc..])
            -e.g. set_sw(coin, [0.7, 0.3]).
        compute probability of probabilistic goal with prob(predicate(goal))
            -e.g. prob(direction(left))

    1.2 Basic probabilistic inference and parameter learning
        -not sure about this one...

    1.3 Utility programs and advanced probabilistic inferences
        -not sure about this one but a little more sure than 1.2...

    probabilistic predicate - a predicate which eventually calls the built-in
    probabilistic predicate, msw/2

    Three parts to a prism program
        Declarations
            -the clauses of some particular built-in predicates which contain additional information on the
            model (of course, they are non-probabilistic).
            e.g. target declaration, data declaration, switch declaration
        Modeling part
            -the definitions of all probabilistic predicates, and of some non-probabilistic predicates which
            are called from probabilistic predicates. This part corresponds to the definition of the model.
            -logic program whose purpose is to generate possible proof trees of a target atom
            which represents observations
        Utility part
            -the remaining definitions of non-probabilistic predicates. This part is a usual Prolog program
            that utilizes the model, and often that can be seen as a meta program of the modeling part.
            e.g. learn, sample, prob, cprob, set_sw

--What are some of these theoretical things?
    -Hidden Markov Model
        -basic tool for speech recoginition
        -stands for a class of finite state automata in which transition is
            probabilistic and an alphabet is emitted on each transition
        -what can be observed from outside is only an output string consisting
            of emitted alphabets while the state transition is not observable,
            hence the name of HMM
    -forward-backward algorithm for calculating the probability of a given string
    -Viterbi algorithm for deciding the most likely state transition sequence for the
        given string
    -Baum-Welch learning algorithm to estimate the probability parameters of an HMM

--Parameter learning


--References
http://www.picat-lang.org/bprolog/
https://blackboard.unomaha.edu/bbcswebdav/pid-1569792-dt-content-rid-3545800_1/courses/CSCI8000001.1168/prismIJCAI.pdf
http://rjida.meijo-u.ac.jp/prism/download/prism22.pdf
